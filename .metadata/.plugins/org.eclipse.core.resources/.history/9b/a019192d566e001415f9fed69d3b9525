package ndnex.dsu.androidrepo.db;

import ndnex.dsu.androidrepo.db.DbContract.ACL;
import ndnex.dsu.androidrepo.db.DbContract.DeviceInfo;
import ndnex.dsu.androidrepo.db.DbContract.SensorData;
import net.named_data.jndn.Interest;
import net.named_data.jndn.security.KeyChain;
import net.named_data.jndn.security.OnVerifiedInterest;
import net.named_data.jndn.security.OnVerifyInterestFailed;
import android.content.ContentValues;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;

/**
 * Manage the data in the database
 * @author Mengjin
 */
public class DbManager implements OnVerifiedInterest, OnVerifyInterestFailed {
	
	public DbHelper mDbHelper;
	
	private static final String EQUAL = "=";
	private static final String NOT_EQUAL = "<>";
	private static final String GREATER_THAN = ">";
	private static final String LESS_THAN = "<";
	private static final String COMMA_SEP = ",";
	private static final String QUERY_DEVICE_INFO = 
			DeviceInfo.COLUMN_NAME_DEVICE_TYPE + EQUAL + "?";
	private static final String QUERY_ACL = 
			ACL.COLUMN_NAME_APP_NAME + EQUAL + "?";
	private static final String QUERY_DATA = 
			SensorData.TIMESTAMP + "BETWEEN" + "?" + "AND" + "?";
	
	/*
	 * Constructor
	 */
	public DbManager() {
		mDbHelper = new DbHelper(null);
	}
	
	/*
	 * Insert data into Device Info table
	 */
	public void insertDeviceInfo(int deviceID, String deviceType) {
		// Gets the data reposiroty in write mode
		SQLiteDatabase db = mDbHelper.getWritableDatabase();
		
		// Create a new map of values, where column names are the keys
		ContentValues values = new ContentValues();
		values.put(DeviceInfo.COLUMN_NAME_DEVICE_NAME, deviceID);
		values.put(DeviceInfo.COLUMN_NAME_DEVICE_TYPE, deviceType);
		
		// Insert the new row, returning the primary key value of the new row
		long newRowId;
		newRowId = db.insert(DeviceInfo.TABLE_NAME, null, values);
	}
	
	/*
	 * Insert data into acl table
	 */
	public void insertAcl(byte[] appName, byte[] appPublicKey, byte[] appFilter) {
		SQLiteDatabase db = mDbHelper.getWritableDatabase();
		
		ContentValues values = new ContentValues();
		values.put(ACL.COLUMN_NAME_APP_NAME, appName);
		values.put(ACL.COLUMN_NAME_APP_PUBLIC_KEY, appPublicKey);
		values.put(ACL.COLUMN_NAME_APP_FILTER, appFilter);
		
		long newRowId;
		newRowId = db.insert(ACL.TABLE_NAME, null, values);
	}
	
	/*
	 * Insert data into specific data capture form
	 */
	public void insertData(int deviceID, byte[] timeStamp, byte[] data) {
		SQLiteDatabase db = mDbHelper.getWritableDatabase();
		
		ContentValues values = new ContentValues();
		values.put(SensorData.TIMESTAMP, timeStamp);
		values.put(SensorData.DATA, data);
	
		long newRowId;
		newRowId = db.insert(Integer.toString(deviceID), null, values);
	}
	
	/*
	 * Reading data from DeviceInfo table according to device type
	 */
	public Cursor readDeviceInfo(String deviceType) {
		SQLiteDatabase db = mDbHelper.getReadableDatabase();
		
		String[] projection = {
				DeviceInfo._ID,
				DeviceInfo.COLUMN_NAME_DEVICE_ID,
				DeviceInfo.COLUMN_NAME_DEVICE_TYPE
		};
		
		String sortOrder = 
				DeviceInfo.COLUMN_NAME_DEVICE_ID + "ASC";
		String[] arg = {deviceType};
		Cursor c = db.query(DeviceInfo.TABLE_NAME, projection, QUERY_DEVICE_INFO,
							arg, null, null, sortOrder);
		return c;
	}

	/*
	 * Reading data from the ACL table according to application names
	 */
	public Cursor readACL(String appName) {
		SQLiteDatabase db = mDbHelper.getReadableDatabase();
		
		String[] projection = {
				ACL._ID,
				ACL.COLUMN_NAME_APP_NAME,
				ACL.COLUMN_NAME_APP_PUBLIC_KEY,
				ACL.COLUMN_NAME_APP_FILTER
		};
		String[] arg = {appName};
		Cursor c = db.query(ACL.TABLE_NAME, projection, QUERY_ACL, arg, null, null, null);
		return c;
	}
	
	/*
	 * Reading data from data tables according to time stamp
	 */
	public Cursor readData(String deviceID,String timeStampStart, String timeStampEnd) {
		SQLiteDatabase db = mDbHelper.getReadableDatabase();
		String[] projection = {
				SensorData._ID,
				SensorData.TIMESTAMP,
				SensorData.DATA
		};
		String sortOrder = 
				SensorData.TIMESTAMP + "ASC";
		String[] arg = {timeStampStart, timeStampEnd};
		Cursor c = db.query(deviceID, projection, QUERY_DATA, arg, null, null, sortOrder);
		return c;
	}
	
	/*
	 * Acquire data from database
	 */
	public void aquireData(Interest interest) {		
		//verify the Interest
		//TODO: the security library is not finalized.
		try{
			//KeyChain keyChain = new KeyChain();
			//keyChain.verifyInterest(interest, this, this);
		} catch (Exception e) {
		// TODO: Is VerifyInterestFailed need to throw a exception?
			e.printStackTrace();
		}
		
		//Data data =  new Data();
		//return data;
	}

	@Override
	public void onVerifiedInterest(Interest interest) {
		// TODO Auto-generated method stub
		//determine if the application is in the ACL table
		// TODO:if we have decide the naming convention, we can get the appName from the interest name
		String appName = "a";
		Cursor c = readACL(appName);
		try {
			if (!c.moveToFirst())
				throw new Exception("The application is not registered.");
		} catch (Exception e) {
		// TODO Auto-generated catch block
			e.printStackTrace();
			return;
		}

		byte[] filter = c.getBlob(c.getColumnIndexOrThrow(ACL.COLUMN_NAME_APP_FILTER));
		
	}

	@Override
	public void onVerifyInterestFailed(Interest interest) {
		// TODO Auto-generated method stub
		System.out.print("Verify Interest Failed.");
	}

	
}
